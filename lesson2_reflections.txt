What happens when you initialize a repository? Why do you need to do it?

    -Make the directory behaves as a "local" repository. Though, it is not uploaded to github yet (i.e. not committed)
	-Do this initialization so the git knows the scope of the repository, rather than just some random files.
	-Arguably, if git auto committed, the parent folder used may be the directory for repository. But that's
	-probably too sudden a change
     To initialize a directory for repository in the git server. Otherwise, we wouldn't know where to put the files.
     Also, with the staging area, initialization without commit allows us to select specific files to commit, rather
	than every file in the working directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?
   
     It allows a place holder for the files to be committed to the repo. Without it, all the files in the working
	directory will need to be committed to the repo.

How can you use the staging area to make sure you have one commit per logical change?

     Can add only certain files belonging to the same single logical change to staging area.
     Can compare the files in staging area and working directory, and the files in staging area and the most currect
	branch, and make sure that they folllow the same logical change before committing.
     
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

     When there is a need for alternate universe. Branching can keep track of these alternate universe.
